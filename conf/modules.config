/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SEQFU_CHECK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.tsv",
                saveAs: {"${meta.id}_seqfu.tsv"}
            ]
        ]
    }

    withName: FASTQSUFFIXHEADERCHECK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.json"
            ]
        ]
    }

    withName: "EDNA:READS_QC_MERGE:FASTP" {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                saveAs: {
                    filename ->
                    {
                        if ((meta.single_end && filename.contains(".fastp.fastq.gz")) ||
                            (!meta.single_end && filename.contains(".merged.fastq.gz"))) {
                            return filename;
                        } else {
                            return null;
                        }
                        }
                    }
            ],
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.json"
            ]
        ]
        ext.args = [
        '--cut_front_window_size 1', // Equivalent of Trimmomatic LEADING window size
        '--cut_tail_window_size 1', // Equivalent of Trimmomatic TRAILING window size
        '--cut_front 3', // Equivalent of Trimmomatic LEADING quality threshold (3)
        '--cut_tail 3', // Equivalent of Trimmomatic TRAILING quality threshold (3)
        '--cut_right', // Equivalent of Trimmomatic SLIDINGWINDOW
        '--cut_right_window_size 4', // Equivalent of Trimmomatic SLIDINGWINDOW window size (4)
        '--cut_right_mean_quality 15', // Equivalent of Trimmomatic SLIDINGWINDOW mean quality (15)
        '-l 100' // Filter out reads smaller than 100 bases
        ].join(' ');

    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
